"Name"    = 'LALR(1) DiJo nonunicode grammar'
"Version" = '1.0'
"Author"  = 'Diana Samboni & John Reyes'
"About"   = 'This is DiJo nonunicode grammar'

{Point}                                 = '.'
{Quote}                                 = ['']
{String Char}                           = {Printable} - ["]
{IdLetter}                              = {Letter} + [_$]
{IdAlphaNumeric}                        = {Alphanumeric} + [_$]
{FloatTypeSuffix}                       = [dfDF]
{NoZeroDigit}                           = [123456789]
{LongTypeSuffix}                        = [lL]
{CharSignEscapeSequence}                = [bfnrt\"] + {Quote}
{CharSign}                              = {String Char} - [\]

Identifier                              = {IdLetter}{IdAlphaNumeric}*
StringLiteral                           = '"'{String Char}*'"'
IntegerLiteral                          = {Digit}+
FloatingPointLiteral                    = {Digit}+{Point}{Digit}+{FloatTypeSuffix}? | {Digit}+{FloatTypeSuffix} | {Point}{Digit}+{FloatTypeSuffix}?
BooleanLiteral                          = 'true' | 'false'
NullLiteral                             = 'null'
IndirectCharLiteral                     = {Quote}{CharSign}{Quote}
StandardEscapeCharLiteral               = {Quote}'\'{CharSignEscapeSequence}{Quote}
StartWithZeroDecimalIntegerLiteral      = '0'{LongTypeSuffix}?
StartWithNoZeroDecimalIntegerLiteral    = {NoZeroDigit}{Digit}*{LongTypeSuffix}?

"Case Sensitive"                        = 'True'
"Start Symbol"                          = <CompilationUnit>

Comment Start                           = '/*'
Comment End                             = '*/'
Comment Line                            = '//'

<Literal>                               ::= StringLiteral
                                         |  IntegerLiteral
                                         |  FloatingPointLiteral
                                         |  BooleanLiteral
                                         |  NullLiteral

<CharacterLiteral>                      ::= IndirectCharLiteral
                                         |  StandardEscapeCharLiteral

<DecimalIntegerLiteral>                 ::= StartWithZeroDecimalIntegerLiteral
                                         |  StartWithNoZeroDecimalIntegerLiteral

<IntegerLiteral>                        ::= <DecimalIntegerLiteral>

<FloatPointLiteral>                     ::= FloatingPointLiteral

<Literal>                               ::= StringLiteral
                                         |  BooleanLiteral
                                         |  NullLiteral
                                         |  <CharacterLiteral>
                                         |  <IntegerLiteral>
                                         |  <FloatPointLiteral>

<IntegralType>                          ::= 'byte'
                                         |  'short'
                                         |  'int'
                                         |  'long'
                                         |  'char'

<FloatingPointType>                     ::= 'float'
                                         |  'double'

<NumericType>                           ::= <IntegralType>
                                         |  <FloatingPointType>

<PrimitiveType>                         ::= 'boolean'
                                         | <NumericType>

<SimpleName>                            ::= Identifier

<QualifiedName>                         ::= <Name>'/'Identifier

<Name>                                  ::= <SimpleName>
                                         |  <QualifiedName>

<ClassOrInterfaceType>                  ::= <Name>

<ClassType>                             ::= <ClassOrInterfaceType>

<InterfaceType>                         ::= <ClassOrInterfaceType>

<ArrayType>                             ::= <PrimitiveType>'[' ']'
                                         |  <Name>'[' ']'
                                         |  <ArrayType>'[' ']'

<ReferenceType>                         ::= <ClassOrInterfaceType>
                                         |  <ArrayType>

<Type>                                  ::= <PrimitiveType>
                                         |  <ReferenceType>

<PackageDeclaration>                    ::= {Quote}'package:'<Name>{Quote}
                                         |  {Quote}<SimpleName>':'<Name>{Quote}
                                         |  <PackageDeclaration> 'as' <SimpleName>

<ImportDeclaration>                     ::= 'import' <PackageDeclaration>';'

<CompilationUnit>                       ::= <ImportDeclaration>
                                         |  

<Modifier>                              ::= 'public'
                                         |  'protected'
                                         |  'private'
                                         |  'static'
                                         |  'abstract'
                                         |  'final'
                                         |  'async'

<Modifiers>                             ::= <Modifier>
                                         |  <Modifiers> <Modifier>

<Super>                                 ::= 'extends' <ClassType>

<InterfaceTypeList>                     ::= <InterfaceType>
                                         | <InterfaceTypeList> ',' <InterfaceType>

<Interfaces>                            ::= 'implements' <InterfaceTypeList>

<PreIncrementExpression>                ::= '++' <UnaryExpression>

<PreDecrementExpression>                ::= '--' <UnaryExpression>

<UnaryExpression>                       ::= '+' <UnaryExpression>
                                         |  '-' <UnaryExpression>
                                         |  <PreIncrementExpression>
                                         |  <PreDecrementExpression>

<MultiplicativeExpression>              ::= <UnaryExpression>
                                         |  <MultiplicativeExpression> '*' <UnaryExpression>
                                         |  <MultiplicativeExpression> '/' <UnaryExpression>
                                         |  <MultiplicativeExpression> '%' <UnaryExpression>

<AdditiveExpression>                    ::= <MultiplicativeExpression>
                                         |  <AdditiveExpression> '+' <MultiplicativeExpression>
                                         |  <AdditiveExpression> '-' <MultiplicativeExpression>

<RelationalExpression>                  ::= <AdditiveExpression>
                                         |  <RelationalExpression> '<' <AdditiveExpression>
                                         |  <RelationalExpression> '>' <AdditiveExpression>
                                         |  <RelationalExpression> '<=' <AdditiveExpression>
                                         |  <RelationalExpression> '>=' <AdditiveExpression>
                                         |  <RelationalExpression> 'instanceof' <ReferenceType>

<EqualityExpression>                    ::= <RelationalExpression>
                                         |  <EqualityExpression> '==' <RelationalExpression>
                                         |  <EqualityExpression> '!=' <RelationalExpression>

<ConditionalAndExpression>              ::= <EqualityExpression>
                                         |  <ConditionalAndExpression> '&&' <EqualityExpression>

<ConditionalOrExpression>               ::= <ConditionalAndExpression>
                                         |  <ConditionalOrExpression> '||' <ConditionalAndExpression>

<ConditionalExpression>                 ::= <ConditionalOrExpression>
                                         |  <ConditionalOrExpression> '?' <Expression> ':' <ConditionalExpression>

<AssignmentExpression>                  ::= <ConditionalExpression>
                                         |  <Assignment>

<Expression>                            ::= <AssignmentExpression>

<ConstantExpression>                    ::= <Expression>
