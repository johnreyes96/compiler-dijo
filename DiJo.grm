"Name"    = 'LALR(1) DiJo nonunicode grammar'
"Version" = '1.0'
"Author"  = 'Diana Samboni & John Reyes'
"About"   = 'This is DiJo nonunicode grammar'

{Point}                                 = '.'
{Quote}                                 = ['']
{String Char}                           = {Printable} - ["]
{IdLetter}                              = {Letter} + [_$]
{IdAlphaNumeric}                        = {Alphanumeric} + [_$]
{FloatTypeSuffix}                       = [dfDF]
{NoZeroDigit}                           = [123456789]
{LongTypeSuffix}                        = [lL]
{CharSignEscapeSequence}                = [bfnrt\"] + {Quote}
{CharSign}                              = {String Char} - [\]

Identifier                              = {IdLetter}{IdAlphaNumeric}*
StringLiteral                           = '"'{String Char}*'"'
IntegerLiteral                          = {Digit}+
FloatingPointLiteral                    = {Digit}+{Point}{Digit}+{FloatTypeSuffix}? | {Digit}+{FloatTypeSuffix} | {Point}{Digit}+{FloatTypeSuffix}?
BooleanLiteral                          = 'true' | 'false'
NullLiteral                             = 'null'
IndirectCharLiteral                     = {Quote}{CharSign}{Quote}
StandardEscapeCharLiteral               = {Quote}'\'{CharSignEscapeSequence}{Quote}
StartWithZeroDecimalIntegerLiteral      = '0'{LongTypeSuffix}?
StartWithNoZeroDecimalIntegerLiteral    = {NoZeroDigit}{Digit}*{LongTypeSuffix}?

"Case Sensitive"                        = 'True'
"Start Symbol"                          = <CompilationUnit>

Comment Start                           = '/*'
Comment End                             = '*/'
Comment Line                            = '//'

<Literal>                               ::= StringLiteral
                                         |  IntegerLiteral
                                         |  FloatingPointLiteral
                                         |  BooleanLiteral
                                         |  NullLiteral

<CharacterLiteral>                      ::= IndirectCharLiteral
                                         |  StandardEscapeCharLiteral

<DecimalIntegerLiteral>                 ::= StartWithZeroDecimalIntegerLiteral
                                         |  StartWithNoZeroDecimalIntegerLiteral

<IntegerLiteral>                        ::= <DecimalIntegerLiteral>

<FloatPointLiteral>                     ::= FloatingPointLiteral

<Literal>                               ::= StringLiteral
                                         |  BooleanLiteral
                                         |  NullLiteral
                                         |  <CharacterLiteral>
                                         |  <IntegerLiteral>
                                         |  <FloatPointLiteral>

<IntegralType>                          ::= 'byte'
                                         |  'short'
                                         |  'int'
                                         |  'long'
                                         |  'char'

<FloatingPointType>                     ::= 'float'
                                         |  'double'

<NumericType>                           ::= <IntegralType>
                                         |  <FloatingPointType>

<PrimitiveType>                         ::= 'boolean'
                                         | <NumericType>

<SimpleName>                            ::= Identifier

<QualifiedName>                         ::= <Name>'/'Identifier

<Name>                                  ::= <SimpleName>
                                         |  <QualifiedName>

<ClassOrInterfaceType>                  ::= <Name>

<ClassType>                             ::= <ClassOrInterfaceType>

<InterfaceType>                         ::= <ClassOrInterfaceType>

<ArrayType>                             ::= <PrimitiveType>'[' ']'
                                         |  <Name>'[' ']'
                                         |  <ArrayType>'[' ']'

<ReferenceType>                         ::= <ClassOrInterfaceType>
                                         |  <ArrayType>

<Type>                                  ::= <PrimitiveType>
                                         |  <ReferenceType>

<PackageDeclaration>                    ::= {Quote}'package:'<Name>{Quote}
                                         |  {Quote}<SimpleName>':'<Name>{Quote}
                                         |  <PackageDeclaration> 'as' <SimpleName>

<ImportDeclaration>                     ::= 'import' <PackageDeclaration>';'

<CompilationUnit>                       ::= <ImportDeclaration>
                                         |  

<Modifier>                              ::= 'public'
                                         |  'protected'
                                         |  'private'
                                         |  'static'
                                         |  'abstract'
                                         |  'final'
                                         |  'async'

<Modifiers>                             ::= <Modifier>
                                         |  <Modifiers> <Modifier>

<Super>                                 ::= 'extends' <ClassType>

<InterfaceTypeList>                     ::= <InterfaceType>
                                         | <InterfaceTypeList> ',' <InterfaceType>

<Interfaces>                            ::= 'implements' <InterfaceTypeList>

<VariableDeclaratorId>                  ::= Identifier
                                         |  <VariableDeclaratorId> '[' ']'

<FormalParameter>                       ::= <Type> <VariableDeclaratorId>

<VariableInitializers>                  ::= <VariableInitializer>
                                         | <VariableInitializers> ',' <VariableInitializer>

<ArrayInitializer>                      ::= '{' <VariableInitializers> ',' '}'
                                         |  '{' <VariableInitializers> '}'
                                         |  '{' ',' '}'
                                         |  '{' '}'

<VariableInitializer>                   ::= <Expression>
                                         |  <ArrayInitializer>

<StatementExpression>                   ::= <Assignment>
                                         |  <PreIncrementExpression>
                                         |  <PreDecrementExpression>
                                         |  <PostIncrementExpression>
                                         |  <PostDecrementExpression>
                                         |  <MethodInvocation>
                                         |  <ClassInstanceCreationExpression>

<VariableDeclarator>                    ::= <VariableDeclaratorId>
                                         |  <VariableDeclaratorId> '=' <VariableInitializer>

<VariableDeclarators>                   ::= <VariableDeclarator>
                                         |  <VariableDeclarators> ',' <VariableDeclarator>

<LabeledStatement>                      ::= Identifier ':' <Statement>

<IfThenStatement>                       ::= 'if' '(' <Expression> ')' <Statement>

<StatementExpressionList>               ::= <StatementExpression>
                                         |  <StatementExpressionList> ',' <StatementExpression>

<LocalVariableDeclaration>              ::= <Type> <VariableDeclarators>

<LocalVariableDeclarationStatement>     ::= <LocalVariableDeclaration> ';'

<ForInit>                               ::= <StatementExpressionList>
                                         | <LocalVariableDeclaration>

<ForUpdate>                             ::= <StatementExpressionList>

<ForStatement>                          ::= 'for' '(' <ForInit> <Expression> <ForUpdate> ')' <Statement>

<WhileStatement>                        ::= 'while' '(' <Expression> ')' <Statement>

<Statement>                             ::= <LabeledStatement>
                                         |  <IfThenStatement>
                                         |  <ForStatement>
                                         |  <WhileStatement>

<BlockStatement>                        ::= <LocalVariableDeclarationStatement>
                                         |  <Statement>

<BlockStatements>                       ::= <BlockStatement>
                                         |  <BlockStatements> <BlockStatement>

<Block>                                 ::= '{' <BlockStatements> '}'
                                         |  '{' '}'

<Catches>                               ::= <CatchClause>
                                         |  <Catches> <CatchClause>

<CatchClause>                           ::= 'catch' '(' <FormalParameter> ')' <Block>

<Finally>                               ::= 'finally' <Block>

<TryStatement>                          ::= 'try' <Block> <Catches>
                                         |  'try' <Block> <Catches> <Finally>
                                         |  'try' <Block> <Finally>

<ArgumentList>                          ::= <Expression>
                                         |  <ArgumentList> ',' <Expression>

<ClassInstanceCreationExpression>       ::= 'new' <ClassType> '(' <ArgumentList> ')'
                                         |  'new' <ClassType> '(' ')'

<FieldAccess>                           ::= <Primary> '.' Identifier
                                         |  'super' '.' Identifier

<MethodInvocation>                      ::= <Name> '(' <ArgumentList> ')'
                                         |  <Name> '(' ')'
                                         |  <Primary> '.' Identifier '(' <ArgumentList> ')'
                                         |  <Primary> '.' Identifier '(' ')'
                                         |  'super' '.' Identifier '(' <ArgumentList> ')'
                                         |  'super' '.' Identifier '(' ')'

<ArrayAccess>                           ::= <Name> '[' <Expression> ']'
                                         |  <PrimaryNoNewArray> '[' <Expression> ']'

<PrimaryNoNewArray>                     ::= <Literal>
                                         |  'this'
                                         |  '(' <Expression> ')'
                                         |  <ClassInstanceCreationExpression>
                                         |  <FieldAccess>
                                         |  <MethodInvocation>
                                         |  <ArrayAccess>

<DimExpr>                               ::= '[' <Expression> ']'

<DimExprs>                              ::= <DimExpr>
                                         |  <DimExprs> <DimExpr>

<Dims>                                  ::= '[' ']'
                                         | <Dims> '[' ']'

<ArrayCreationExpression>               ::= 'new' <PrimitiveType> <DimExprs> <Dims>
                                         |  'new' <PrimitiveType> <DimExprs>
                                         |  'new' <ClassOrInterfaceType> <DimExprs> <Dims>
                                         |  'new' <ClassOrInterfaceType> <DimExprs>

<Primary>                               ::= <PrimaryNoNewArray>
                                         |  <ArrayCreationExpression>

<PostfixExpression>                     ::= <Primary>
							             |  <Name>
                                         |  <PostIncrementExpression>
                                         |  <PostDecrementExpression>

<PostIncrementExpression>               ::= <PostfixExpression> '++'

<PostDecrementExpression>               ::= <PostfixExpression> '--'

<CastExpression>                        ::= '(' <PrimitiveType> <Dims> ')' <UnaryExpression>
                                         |  '(' <PrimitiveType> ')' <UnaryExpression>
                                         |  '(' <Expression> ')' <UnaryExpressionNotPlusMinus>
                                         |  '(' <Name> <Dims> ')' <UnaryExpressionNotPlusMinus>

<UnaryExpressionNotPlusMinus>           := <PostfixExpression>
                                         |  '~' <UnaryExpression>
                                         |  '!' <UnaryExpression>
                                         |  <CastExpression>

<UnaryExpression>                       ::= '+' <UnaryExpression>
                                         |  '-' <UnaryExpression>
                                         |  <PreIncrementExpression>
                                         |  <PreDecrementExpression>
			                             |  <UnaryExpressionNotPlusMinus>

<MultiplicativeExpression>              ::= <UnaryExpression>
                                         |  <MultiplicativeExpression> '*' <UnaryExpression>
                                         |  <MultiplicativeExpression> '/' <UnaryExpression>
                                         |  <MultiplicativeExpression> '%' <UnaryExpression>

<AdditiveExpression>                    ::= <MultiplicativeExpression>
                                         |  <AdditiveExpression> '+' <MultiplicativeExpression>
                                         |  <AdditiveExpression> '-' <MultiplicativeExpression>

<RelationalExpression>                  ::= <AdditiveExpression>
                                         |  <RelationalExpression> '<' <AdditiveExpression>
                                         |  <RelationalExpression> '>' <AdditiveExpression>
                                         |  <RelationalExpression> '<=' <AdditiveExpression>
                                         |  <RelationalExpression> '>=' <AdditiveExpression>
                                         |  <RelationalExpression> 'instanceof' <ReferenceType>

<EqualityExpression>                    ::= <RelationalExpression>
                                         |  <EqualityExpression> '==' <RelationalExpression>
                                         |  <EqualityExpression> '!=' <RelationalExpression>

<ConditionalAndExpression>              ::= <EqualityExpression>
                                         |  <ConditionalAndExpression> '&&' <EqualityExpression>

<ConditionalOrExpression>               ::= <ConditionalAndExpression>
                                         |  <ConditionalOrExpression> '||' <ConditionalAndExpression>

<ConditionalExpression>                 ::= <ConditionalOrExpression>
                                         |  <ConditionalOrExpression> '?' <Expression> ':' <ConditionalExpression>

<AssignmentExpression>                  ::= <ConditionalExpression>
                                         |  <Assignment>

<Assignment>                            ::= <LeftHandSide> <AssignmentOperator> <AssignmentExpression>

<LeftHandSide>                          ::= <Name>
                                         |  <FieldAccess>
                                         |  <ArrayAccess>

<AssignmentOperator>                    ::= '='
                                         |  '*='
                                         |  '/='
                                         |  '%='
                                         |  '+='
                                         |  '-='

<Expression>                            ::= <AssignmentExpression>

<ConstantExpression>                    ::= <Expression>
